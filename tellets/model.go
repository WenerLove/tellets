package tellets
import (
	"time"
	"bytes"
)

// A context object for parser collector
type Entry struct {
	Filename      string
	// Source contain this entry
	Source        string
	// Source uri for this entry
	EntrySource   string
	State         string
	Hash          string
	Post          *Post
	Option        Option

	Content       string
	OriginContent string
}

func NewEntry() Entry {
	return Entry{
		Option: Option(make(map[string]string)),
	}
}

type Category struct {
	Id          string
	Name        string
	Description string
	Language    string
}

type Tag struct {
	Id          string
	Name        string
	Description string
	Language    string
}

type Author struct {
	Code    string `gorm:"primary_key"`
	Name    string
	Email   string `sql:"type:varchar(100);unique_index"`
	Website string
}

func (a Author)ToString() string {
	buf := bytes.NewBufferString("")
	if a.Name != "" {
		buf.WriteString(a.Name)
	}else {
		buf.WriteString(a.Code)
	}
	if a.Email != "" {buf.WriteString("<"+a.Email+">")}
	if a.Website != "" {buf.WriteString("("+a.Name+")")}
	return buf.String()
}

type ArticleState string
type ContentFormat string
type Feature string

const (
	ARTICLE_PUBLISHED   ArticleState = "PUBLISHED"
	ARTICLE_DRAFT       ArticleState = "DRAFT"
)
const (
	FORMAT_HTML   ContentFormat = "HTML"
	FORMAT_MARKDOWN       ContentFormat = "MARKDOWN"
)

type Post struct {
	PermLink     string `gorm:"primary_key"`
	// Optional, Generated by title
	Link         string
	Source       string `sql:"not null;unique"`
	Title        string
	Language     string
	Intro        string `sql:"size:1024"`
	// ~100k
	Content string `sql:"type:varchar(100000)"`
	// 文章格式, markdown,html,slide...
	Format  string
	Hash         string

	Categories   []Category `gorm:"many2many:post_category;"`
	Tags         []Tag      `gorm:"many2many:post_tag;"`
	// Format is wener<wener@wener.me>(http://hi.wener.me)
	Authors []Author   `gorm:"many2many:post_author;"`

	PublishDate  *time.Time
	ModifiedDate *time.Time

	CreatedAt    time.Time
	UpdatedAt    time.Time
	DeletedAt    *time.Time
}

