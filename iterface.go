package tellets
import (
	"net/url"
	"time"
	"github.com/jinzhu/gorm"
	"bytes"
	"errors"
)

// Parser can not parse, will try next
var ErrCanNotParse = errors.New("Can not parse")


type Tellets interface {
	Option() TelletsOption
	Storage() Storage
	Hook() Hook
	Context() Context
}
type Storage interface {
	DB() gorm.DB
	TableName(string) string
	Store(interface{}) error
}
type Option map[string]interface{}
type TelletsOption Option

const (
	HookInit HookType = "Init"
	HookParse = "Parse"
	HookCollect = "Collect"
)

type DataServer interface {
	Tellets() Tellets
	Hook() Hook
}

type CollectionServer interface {
	Tellets() Tellets
	Hook() Hook
	Collect(*url.URL) ([]Collection, error);
	Schedule(string, *url.URL) error
}
type Parser func(Collection) (*Meta, error)
type Collector func(*url.URL) ([]Collection, error)

type Named interface {
	Name() string
}

type Collection struct {
	// Filename
	Filename string
	Content  string
	From     *url.URL
	Attrs    map[string]string
}

type Category struct {
	Name string
}
type Tag struct {
	Name string
}

type Author struct {
	Name    string `json:"name,omitempty"`
	Email   string `json:"email,omitempty"`
	Website string `json:"website,omitempty"`
}

func (a Author)ToString() string {
	buf := bytes.NewBufferString("")
	if a.Name != "" {buf.WriteString(a.Name)}
	if a.Email != "" {buf.WriteString("<"+a.Email+">")}
	if a.Website != "" {buf.WriteString("("+a.Name+")")}
	return buf.String()
}
type Article struct {
	// Required
	Title            string  `json:"title,omitempty"`
	Categories       []Category `json:"categories,omitempty"`
	Tags             []Tag `json:"tags,omitempty"`
	Date             *time.Time`json:"date,omitempty"`
	LastModifiedDate *time.Time`json:"lastModifiedDate,omitempty"`
	State            ArticleState  `json:"state,omitempty"`
	// Optional, Generated by title
	Link             string  `json:"link,omitempty"`
	PermLink         string  `json:"permLink,omitempty"`
	Features         []string
	Format           string  `json:"format,omitempty"`
	// Key to find an article
	Hash             string  `json:"hash,omitempty" gorm:"primary_key"`
	// Format is wener<wener@wener.me>(http://hi.wener.me)
	Authors          []Author`json:"author,omitempty"`
	// Optional option
	Option           Option`json:"option,omitempty"`
	Intro            string  `json:"intro,omitempty"`
	Content          string `json:"content,omitempty"`
}

type ArticleState string
type ContentFormat string
type Feature string

const (
	ARTICLE_PUBLISHED   ArticleState = "PUBLISHED"
	ARTICLE_DRAFT       ArticleState = "DRAFT"
)
const (
	FORMAT_HTML   ContentFormat = "HTML"
	FORMAT_MARKDOWN       ContentFormat = "MARKDOWN"
)

func RegisterCollector(f func() Collector) {

}

func RegisterParser(f func() Parser) {

}
func RegisterPlugin(f func(Tellets)) {

}

func NewDataServer(t Tellets) DataServer {
	return nil
}
func NewCollectionServer(t Tellets) CollectionServer {
	return nil
}
func NewTellets(cfg string) Tellets {
	return nil;
}

type Meta Option
func (o Meta)Title() string {
	return o["title"].(string)
}
func (o Meta)SetTitle(v string) Meta {
	o["title"]=v
	return o
}
func (o Meta)Content() string {
	return o["content"].(string)
}
func (o Meta)SetContent(v string) Meta {
	o["content"]=v
	return o
}
func (o Meta)Intro() string {
	return o["intro"].(string)
}
func (o Meta)SetIntro(v string) Meta {
	o["intro"]=v
	return o
}
func (o Meta)Link() string {
	return o["link"].(string)
}
func (o Meta)SetLink(v string) Meta {
	o["link"]=v
	return o
}
func (o Meta)PermLink() string {
	return o["perm-link"].(string)
}
func (o Meta)SetPermLink(v string) Meta {
	o["perm-link"]=v
	return o
}
func (o Meta)Format() string {
	return o["format"].(string)
}
func (o Meta)SetFormat(v string) Meta {
	o["format"]=v
	return o
}
func (o Meta)Hash() string {
	return o["hash"].(string)
}
func (o Meta)SetHash(v string) Meta {
	o["hash"]=v
	return o
}
func (o Meta)State() ArticleState {
	return o["state"].(ArticleState)
}
func (o Meta)SetState(v ArticleState) Meta {
	o["state"]=v
	return o
}
func (o Meta)Categories() []string {
	return o["category"].([]string)
}
func (o Meta)SetCategories(v []string) Meta {
	o["category"]=v
	return o
}
func (o Meta)Authors() []string {
	return o["author"].([]string)
}
func (o Meta)SetAuthors(v []string) Meta {
	o["author"]=v
	return o
}
func (o Meta)Features() []string {
	return o["feature"].([]string)
}
func (o Meta)SetFeatures(v []string) Meta {
	o["feature"]=v
	return o
}
func (o Meta)Tags() []string {
	return o["tag"].([]string)
}
func (o Meta)SetTags(v []string) Meta {
	o["Tagtags"]=v
	return o
}
func (o Meta)Date() *time.Time {
	return o["date"].(*time.Time)
}
func (o Meta)SetDate(v *time.Time) Meta {
	o["date"]=v
	return o
}
func (o Meta)LastModifiedDate() *time.Time {
	return o["last-modified-date"].(*time.Time)
}
func (o Meta)SetLastModifiedDate(v *time.Time) Meta {
	o["last-modified-date"]=v
	return o
}
